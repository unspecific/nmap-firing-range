#!/bin/bash

if [[ $EUID -ne 0 ]]; then
  echo "üîí Root access required. Re-running with sudo..."
  exec sudo "$0" "$@"
fi

APP="NFR Cleanup"
VERSION="0.4"
LAB_DIR="/opt/firing-range"
LOG_DIR="logs"
BIN_DIR="bin"
TELNET_DIR="telnet_flag"
SMB_DIR="smb_flag"
NC_DIR="nc_flag"
FTP_DIR="ftp_flag"
WEB_DIR="web_flag"
SECONDS=0

# -- Validate input file --
if [[ $# -ne 1 ]]; then
  SUBMISSION_FILE="score_card"
else
  SUBMISSION_FILE="$1"
fi

if [[ ! -f "$SUBMISSION_FILE" ]]; then
  echo "‚ùå ScoreCard file not found: $SUBMISSION_FILE"
  echo "   Please specify the score_card file you wish to use."
  echo "   **must include session=SESSION_ID"
  exit 1;
fi

# -- Extract session ID from submission file --
SESSION_ID=$(grep -m 1 '^session=' "$SUBMISSION_FILE" | cut -d'=' -f2)
SESSION_DIR="$LAB_DIR/$LOG_DIR/lab_$SESSION_ID"
if [[ ! $SESSION_ID ]]; then
  echo "‚ùå Session ID not found in $SUBMISSION_FILE"
  exit 1
fi
NETWORK="range-$SESSION_ID"

echo
echo " üé©  $APP v$VERSION - Lee 'MadHat' Heath <lheath@unspecific.com>"

# verify the session can be found
if [[ ! -f "$SESSION_DIR/services.map" ]]; then
  echo "‚ùå Lab Session $SESSION_ID Services file Not Found"
  exit 1
fi

# Ensure the script exists before continuing
SCRIPT_FILE="$LAB_DIR/$BIN_DIR/launch_lab.sh"
if [[ ! -f "$SCRIPT_FILE" ]]; then
  echo "‚ùå $SCRIPT_FILE not found! Please ensure the script is in place."
  exit 1
fi

# Check for the docker-compose.yml file generated by launch_random_lab.sh
COMPOSE_FILE="$SESSION_DIR/docker-compose.yml"
if [[ ! -f "$COMPOSE_FILE" ]]; then
  echo "‚ùå $COMPOSE_FILE not found! Make sure the lab environment was launched first."
  exit 1
fi

# Let's cleanup docker.
for cname in $(grep -vE '^\s*#|^\s*$' "$SESSION_DIR/services.map"); do
  if docker inspect -f '{{.State.Running}}' "$cname" 2>/dev/null | grep -q true; then
    echo " üõë  Stopping container: $cname"
    docker stop "$cname" > /dev/null  ||  echo " ‚ö†Ô∏è  Unsuccessful"
  else
    echo " ‚ÑπÔ∏è  Container $cname is not running."
  fi

  if docker ps -a --format '{{.Names}}' | grep -q "^${cname}$"; then
    echo " üóëÔ∏è  Removing container: $cname"
    docker rm "$cname" > /dev/null  ||  echo " ‚ö†Ô∏è  Unsuccessful"
  fi

  if docker volume ls -q | grep -q "^${cname}$"; then
    echo " üóëÔ∏è  Removing volume: $cname"
    docker volume rm "$cname" > /dev/null ||  echo " ‚ö†Ô∏è  Unsuccessful"
  fi
done


# Remove the specific network for the lab environment (do not remove all networks)
echo " üåê Removing lab network ($NETWORK)"
docker network rm $NETWORK &>/dev/null || echo " ‚ö†Ô∏è  Network $NETWORK not found or already removed."

echo " ‚úÖ Lab environment cleanup complete."
echo

duration=$SECONDS
echo "‚è±Ô∏è  Lab cleanup completed in $duration seconds"
